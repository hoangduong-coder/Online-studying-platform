import { ADD_LESSON, GET_COURSE_FULL } from "@/graphql/course_query"
import { content, heading } from "@/styles/font"

import ContinueLink from "@/components/widgets/ContinueLink"
import Head from "next/head"
import SubmitButton from "@/components/widgets/SubmitButton"
import { TextField } from "@mui/material"
import { useMutation } from "@apollo/client"
import { useRouter } from "next/router"
import { useState } from "react"

const NewContentForm = () => {
  const { courseID } = useRouter().query
  const [title, setTitle] = useState("")
  const [lessonContent, setContent] = useState("")

  const [notification, setNotification] = useState<{
    passed: boolean
    message: string
  }>({
    passed: true,
    message: "",
  })
  const [addLesson] = useMutation(ADD_LESSON, {
    onError: (error) =>
      setNotification({
        passed: false,
        message: error.message,
      }),
    onCompleted: () =>
      setNotification({
        passed: true,
        message:
          "Create new lesson done, return to the course page and see the result",
      }),
    refetchQueries: [
      { query: GET_COURSE_FULL, variables: { getFullCourseId: courseID } },
    ],
  })

  const submit = (e: any) => {
    e.preventDefault()
    addLesson({
      variables: {
        title,
        content: lessonContent,
        courseId: courseID,
      },
    })
  }
  return (
    <>
      <Head>
        <title>Create new lesson | HD online platform</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className="header">
          <h1 style={heading.style}>Create course</h1>
        </div>
        <form onSubmit={submit} className="creationForm">
          <div>
            <span>
              <h3 style={heading.style}>Lesson title</h3>
            </span>
            <TextField
              style={content.style}
              value={title}
              required
              color="warning"
              onChange={({ target }) => setTitle(target.value)}
              fullWidth
              size="small"
            />
          </div>
          <div>
            <span>
              <h3 style={heading.style}>Course content</h3>
            </span>
            <textarea
              className="description"
              style={content.style}
              value={lessonContent}
              required
              onChange={({ target }) => setContent(target.value)}
            />
          </div>

          {notification.message.length === 0 ? (
            <SubmitButton title="Create" />
          ) : (
            <div
              className={
                notification.passed ? "passedMessage" : "failedMessage"
              }
            >
              {notification.passed ? (
                <p style={content.style}>
                  {notification.message}
                  <span>
                    <ContinueLink url={`/${courseID}`} title="this link" />
                  </span>
                </p>
              ) : (
                <p style={content.style}>{notification.message}</p>
              )}
            </div>
          )}
        </form>
      </div>
    </>
  )
}
export default NewContentForm
