import { ENROLL_COURSE, GET_COURSE_FULL } from "@/graphql/course_query"
import { useMutation, useQuery } from "@apollo/client"

import { GET_CURRENT_USER } from "@/graphql/user_query"
import Head from "next/head"
import LessonPageforEnroll from "@/components/course/LessonPageforEnroll"
import LessonPageforTeacher from "@/components/course/LessonPageforTeacher"
import LessonPageforUnenroll from "@/components/course/LessonPageforUnenroll"
import { content } from "@/styles/font"
import { useRouter } from "next/router"

export default function Course() {
  const router = useRouter()
  const { courseID } = router.query
  const { data } = useQuery(GET_CURRENT_USER)
  const [enrollCourse] = useMutation(ENROLL_COURSE, {
    refetchQueries: [
      { query: GET_COURSE_FULL, variables: { getFullCourseId: courseID } },
    ],
    onError: (error) =>
      alert(
        `Enrollment failed, due to error ${error.graphQLErrors[0].message}`
      ),
    onCompleted: (mess) => {
      alert(`${mess.enrollCourse}. Refresh page to see details`)
    },
  })
  return (
    <>
      <Head>
        <title>View course | HD learning platform</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {!data.getUser && (
          <div>
            <p style={content.style}>{`There is an error`}</p>
          </div>
        )}
        {data.getUser.__typename === "Teacher" && (
          <LessonPageforTeacher
            courseID={courseID}
            teacherData={data.getUser}
          />
        )}
        {data.getUser.studyProgress &&
          !data.getUser.studyProgress.find(
            (obj) => obj.course.id === courseID
          ) && (
            <LessonPageforUnenroll
              courseID={courseID}
              enrollCourse={(e: any) => {
                e.preventDefault()
                enrollCourse({ variables: { courseId: courseID } })
              }}
            />
          )}

        {data.getUser.studyProgress &&
          data.getUser.studyProgress.find(
            (obj) => obj.course.id === courseID
          ) && <LessonPageforEnroll courseID={courseID} />}
      </div>
    </>
  )
}
