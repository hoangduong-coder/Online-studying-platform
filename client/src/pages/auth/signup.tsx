import { IconButton, InputAdornment, MenuItem, TextField } from "@mui/material"
import { Visibility, VisibilityOff } from "@mui/icons-material"
import { content, heading } from "@/styles/font"

import Head from "next/head"
import { SIGN_UP } from "@/graphql/user_query"
import SubmitButton from "@/components/widgets/SubmitButton"
import { useMutation } from "@apollo/client"
import { useState } from "react"

const SignUpPage = ({ setNewUser }: any) => {
  const [user, setUser] = useState<{
    name: string
    email: string
    role: string
  }>({
    name: "",
    email: "",
    role: "STUDENT",
  })
  const [password, setPassword] = useState<string>("")
  const [organization, setOrganization] = useState<string>("")
  const [showPassword, setShowPassword] = useState(false)
  const [notification, setNotification] = useState<{
    passed: boolean
    message: string
  }>({
    passed: false,
    message: "",
  })
  const [signUpMutation] = useMutation(SIGN_UP, {
    onError: (error) =>
      setNotification({
        passed: false,
        message: error.message,
      }),
    onCompleted: (data) => {
      setNotification({
        passed: true,
        message: `Welcome ${data.createUser.name} as a ${data.createUser.__typename}. Please check and verify your email`,
      }),
        setNewUser(false)
    },
  })

  const submit = (event: any) => {
    event.preventDefault()
    if (user.role === "TEACHER") {
      signUpMutation({
        variables: {
          name: user.name,
          email: user.email,
          password,
          organization,
        },
      })
    } else {
      signUpMutation({
        variables: {
          name: user.name,
          email: user.email,
          password,
        },
      })
    }
    setPassword("")
    setUser({
      name: "",
      email: "",
      role: "STUDENT",
    })
  }

  const handleClickShowPassword = () => setShowPassword((show) => !show)

  return (
    <>
      <Head>
        <title>Sign up | HD online platform</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="auth-content">
        <div className="signupForm">
          <h1 style={heading.style}>Sign up</h1>
          <form onSubmit={submit}>
            <div>
              <span>
                <p style={content.style}>Name *</p>
              </span>
              <TextField
                value={user.name}
                required
                color="warning"
                onChange={({ target }) =>
                  setUser({ ...user, name: target.value })
                }
                fullWidth
                size="small"
              />
            </div>
            <div>
              <span>
                <p style={content.style}>Email *</p>
              </span>
              <TextField
                value={user.email}
                required
                color="warning"
                onChange={({ target }) =>
                  setUser({ ...user, email: target.value })
                }
                fullWidth
                size="small"
              />
            </div>
            <div>
              <span>
                <p style={content.style}>Password * </p>
              </span>
              <TextField
                type={showPassword ? "text" : "password"}
                value={password}
                fullWidth
                required
                color="warning"
                onChange={({ target }) => setPassword(target.value)}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end" sx={{ marginTop: "5px" }}>
                      <IconButton onClick={handleClickShowPassword} edge="end">
                        {showPassword ? <VisibilityOff /> : <Visibility />}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
                helperText="At least 8 characters, contains both digits and letters"
              />
            </div>
            <div>
              <span>
                <p style={content.style}>Role *</p>
              </span>
              <TextField
                select
                required
                value={user.role}
                color="warning"
                onChange={({ target }) =>
                  setUser({ ...user, role: target.value })
                }
                fullWidth
                size="small"
              >
                {["STUDENT", "TEACHER"].map((role) => (
                  <MenuItem key={role} value={role}>
                    {role}
                  </MenuItem>
                ))}
              </TextField>
            </div>
            {user.role === "TEACHER" && (
              <div>
                <span>
                  <p style={content.style}>Your organization *</p>
                </span>
                <TextField
                  type="text"
                  value={organization}
                  required
                  color="warning"
                  onChange={({ target }) => setOrganization(target.value)}
                  fullWidth
                  size="small"
                />
              </div>
            )}
            {notification.message.length > 0 && (
              <div
                className={
                  notification.passed ? "passedMessage" : "failedMessage"
                }
              >
                {notification.passed ? (
                  <p style={content.style}>{notification.message}</p>
                ) : (
                  <SubmitButton title="Continue" />
                )}
              </div>
            )}
          </form>
          <h4 style={heading.style} onClick={() => setNewUser(false)}>
            Back to login
          </h4>
        </div>
      </div>
    </>
  )
}
export default SignUpPage
