import { content, heading } from "@/styles/font"

import { ADD_COURSE } from "@/graphql/course_query"
import ContinueLink from "@/components/widgets/ContinueLink"
import { GET_CURRENT_USER } from "@/graphql/user_query"
import Head from "next/head"
import SubmitButton from "@/components/widgets/SubmitButton"
import { TextField } from "@mui/material"
import { useMutation } from "@apollo/client"
import { useRouter } from "next/router"
import { useState } from "react"

const NewCourse = () => {
  const { tid } = useRouter().query
  const [notification, setNotification] = useState<{
    passed: boolean
    message: string
  }>({
    passed: false,
    message: "",
  })
  const [categoryItem, setCategoryItem] = useState<string>("")
  const [courseInfo, setCourseInfo] = useState<{
    name: string
    description: string
    category: string[]
    estimateTime: number
  }>({ name: "", description: "", category: [], estimateTime: 0 })
  const [addCourse] = useMutation(ADD_COURSE, {
    onError: (error) =>
      setNotification({
        passed: false,
        message: error.message,
      }),
    onCompleted: () =>
      setNotification({
        passed: true,
        message:
          "Create new course done, return to the profile and see the result",
      }),
    refetchQueries: [{ query: GET_CURRENT_USER }],
  })

  const addCategory = () => {
    setCourseInfo({
      ...courseInfo,
      category: courseInfo.category.concat(categoryItem),
    })
    setCategoryItem("")
  }

  const submit = (e: any) => {
    e.preventDefault()
    addCourse({
      variables: {
        ...courseInfo,
        teacherId: tid,
      },
    })
  }
  return (
    <>
      <Head>
        <title>Create new | HD online platform</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className="header">
          <h1 style={heading.style}>Create course</h1>
        </div>
        <form onSubmit={submit} className="creationForm">
          <div>
            <span>
              <h3 style={heading.style}>Course title</h3>
            </span>
            <TextField
              style={content.style}
              value={courseInfo.name}
              required
              color="warning"
              onChange={({ target }) =>
                setCourseInfo({ ...courseInfo, name: target.value })
              }
              fullWidth
              size="small"
            />
          </div>
          <div>
            <span>
              <h3 style={heading.style}>Course description</h3>
            </span>
            <textarea
              className="description"
              style={content.style}
              value={courseInfo.description}
              required
              onChange={({ target }) =>
                setCourseInfo({ ...courseInfo, description: target.value })
              }
            />
          </div>
          <div>
            <span>
              <h3 style={heading.style}>Category</h3>
            </span>
            <div className="categoryBody">
              <TextField
                value={categoryItem}
                color="warning"
                onChange={({ target }) => {
                  setCategoryItem(target.value)
                }}
                sx={{ width: "90%" }}
                size="small"
              />
              <SubmitButton title="Add" onClick={addCategory} />
            </div>
            <div className="categoryList">
              <h3 style={heading.style}>List of categories: </h3>
              <p style={content.style}>{courseInfo.category.join(", ")}</p>
            </div>
            <div>
              <span>
                <h3 style={heading.style}>
                  Estimated time to finish the course
                </h3>
              </span>
              <TextField
                type="number"
                value={courseInfo.estimateTime}
                required
                color="warning"
                onChange={({ target }) =>
                  //@ts-ignore
                  setCourseInfo({
                    ...courseInfo,
                    estimateTime: parseInt(target.value),
                  })
                }
                fullWidth
                size="small"
              />
            </div>
          </div>
          {notification.message.length > 0 && (
            <div
              className={
                notification.passed ? "passedMessage" : "failedMessage"
              }
            >
              {notification.passed ? (
                <p style={content.style}>
                  {notification.message}
                  <span>
                    <ContinueLink
                      url={`/profile/myprofile`}
                      title="this link"
                    />
                  </span>
                </p>
              ) : (
                <p style={content.style}>{notification.message}</p>
              )}
            </div>
          )}
          {!notification.passed && <SubmitButton title="Create" />}{" "}
        </form>
      </div>
    </>
  )
}
export default NewCourse
